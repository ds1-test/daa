#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void merge(int arr[], int left, int mid, int right)
{
int i, j, k;
int n1 = mid - left + 1;
int n2 = right - mid;

int *L = (int *)malloc(n1 * sizeof(int));
int *R = (int *)malloc(n2 * sizeof(int));

for (i = 0; i < n1; i++)
L[i] = arr[left + i];
for (j = 0; j < n2; j++)
R[j] = arr[mid + 1 + j];

i = 0, j = 0, k = left;
while (i < n1 && j < n2)
{
if (L[i] <= R[j])
arr[k++] = L[i++];
else
arr[k++] = R[j++];
}

while (i < n1)
arr[k++] = L[i++];
while (j < n2)
arr[k++] = R[j++];

free(L);
free(R);
}

void mergeSort(int arr[], int left, int right)
{
if (left < right)
{
int mid = left + (right - left) / 2;
mergeSort(arr, left, mid);
mergeSort(arr, mid + 1, right);
merge(arr, left, mid, right);
}
}

int main()
{
int *a, i, n;
clock_t start, end;
double dura;

printf("\nEnter the number of elements (n): ");
scanf("%d", &n);

a = (int *)malloc(n * sizeof(int));
if (a == NULL)
{
printf("Memory allocation failed!\n");
return 1;
}

srand(time(0));

printf("\nGenerated Random Array: ");
for (i = 0; i < n; i++)
{
a[i] = rand() % 1000;
printf("%d ", a[i]);
}

start = clock();
mergeSort(a, 0, n - 1);
end = clock();

dura = (double)(end - start)*1000000 / CLOCKS_PER_SEC;
printf("\n\nTime taken for sorting: %f seconds", dura);

printf("\nSorted Array: ");
for (i = 0; i < n; i++)
printf("%d ", a[i]);

printf("\n");
free(a);
return 0;
}
