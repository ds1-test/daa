Excellent. Welcome to Phase 5: Real-Time Web Dashboard (React.js + SQLite API)

Goal: Build a farmer-facing dashboard that shows:

Cattle health status (Healthy / Anomaly)

Vital signs

Color-coded alerts

Location of each animal on map (with search)


Folder structure:

frontend/ ├── public/ ├── src/ │   ├── components/ │   │   ├── CattleCard.jsx │   │   ├── MapView.jsx │   ├── App.jsx │   ├── api.js │   ├── index.js ├── package.json ├── tailwind.config.js ├── postcss.config.js ├── vite.config.js

Step 1: Set up React with Tailwind

1. Install Node.js if not installed


2. Create React app



npm create vite@latest frontend -- --template react
cd frontend
npm install
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p

3. Configure tailwind.config.js



content: ["./index.html", "./src/**/*.{js,ts,jsx,tsx}"]

4. Add Tailwind to src/index.css:



@tailwind base;
@tailwind components;
@tailwind utilities;

Step 2: Fetch Cattle Data from Backend

Create src/api.js

const API_BASE = "http://localhost:5000"; // adjust if hosted elsewhere

export async function fetchCattleData() { const res = await fetch(${API_BASE}/api/latest-data); return res.json(); }

Step 3: Backend Endpoint (Add to Flask routes.py)

Add this route to get latest cattle data:

@cattle_bp.route('/api/latest-data') def get_latest_data(): conn = sqlite3.connect("data/cattle.db") cursor = conn.cursor() cursor.execute(""" SELECT cattle_id, MAX(timestamp), temperature, heart_rate, activity, lat, lon, status FROM cattle_data GROUP BY cattle_id """) rows = cursor.fetchall() conn.close() keys = ["cattle_id", "timestamp", "temperature", "heart_rate", "activity", "lat", "lon", "status"] return jsonify([dict(zip(keys, row)) for row in rows])

Step 4: Create Dashboard Components

src/components/CattleCard.jsx

import React from "react";

export default function CattleCard({ data }) { return ( <div className={p-4 rounded-xl shadow-md border-l-8 ${data.status === "anomaly" ? "border-red-500 bg-red-50" : "border-green-500 bg-green-50"}}> <h2 className="text-xl font-bold">{data.cattle_id}</h2> <p>Temp: {data.temperature} °C</p> <p>HR: {data.heart_rate} bpm</p> <p>Activity: {data.activity}</p> <p>Status: <strong>{data.status}</strong></p> <p className="text-xs text-gray-500">{data.timestamp}</p> </div> ); }

src/components/MapView.jsx

import React from "react"; import { MapContainer, TileLayer, Marker, Popup } from "react-leaflet"; import "leaflet/dist/leaflet.css";

export default function MapView({ cattle }) { const center = [12.9716, 77.5946]; // Bangalore (replace if needed)

return ( <MapContainer center={center} zoom={14} className="h-80 rounded-xl"> <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" /> {cattle.map((c) => ( <Marker key={c.cattle_id} position={[c.lat, c.lon]}> <Popup> <strong>{c.cattle_id}</strong><br /> Status: {c.status} </Popup> </Marker> ))} </MapContainer> ); }

Install Leaflet:

npm install react-leaflet leaflet

Step 5: Main App (src/App.jsx)

import { useEffect, useState } from "react"; import { fetchCattleData } from "./api"; import CattleCard from "./components/CattleCard"; import MapView from "./components/MapView";

function App() { const [cattle, setCattle] = useState([]);

useEffect(() => { fetchCattleData().then(setCattle); const interval = setInterval(() => fetchCattleData().then(setCattle), 5000); return () => clearInterval(interval); }, []);

return ( <div className="p-4 space-y-4"> <h1 className="text-3xl font-bold">CattleGuard Dashboard</h1> <MapView cattle={cattle} /> <div className="grid grid-cols-1 md:grid-cols-3 gap-4"> {cattle.map((c) => <CattleCard key={c.cattle_id} data={c} />)} </div> </div> ); }

export default App;

Step 6: Start Dashboard

npm run dev

→ Open http://localhost:5173

You’ll see:

Live cards for each cattle

Color-coded (green = healthy, red = anomaly)

Location pins on map

Auto-refresh every 5 seconds


Next: Phase 6 — Alerts (Twilio + Email Notification System)

Shall we continue? Reply: Start Phase 6.

